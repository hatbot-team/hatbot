__author__ = 'moskupols'


class ExplanationSource:

    @classmethod
    def explain(cls, word: str)->list:
        """
        Returns list of explanation.Explanation for the given word.

        >>> from explanations.sources import PhraseologicalSource
        >>> list(map(str, PhraseologicalSource.explain('голод')))
        ['*пропуск* не тетка']
        >>> list(map(str, PhraseologicalSource.explain('полка')))
        ['класть зубы на *пропуск*', 'положить зубы на *пропуск*']

        >>> from explanations.sources import CollocationsSource
        >>> list(map(str, CollocationsSource.explain('учёт')))
        ['миграционный *пропуск*']
        >>> list(map(str, CollocationsSource.explain('язык')))
        ['русский *пропуск*']

        >>> from explanations.sources import AntonymSource
        >>> list(map(str, AntonymSource.explain('свет')))
        ['антоним к словам тьма, мрак, темнота, тень']
        >>> list(map(str, AntonymSource.explain('альтруист')))
        ['антоним к слову эгоист']
        >>> list(map(str, AntonymSource.explain('диван')))
        []

        >>> from explanations.sources import SynonymSource
        >>> list(map(str, SynonymSource.explain('богомолье')))
        ['синоним к словам богослужение, священнодействие']
        >>> list(map(str, SynonymSource.explain('адский')))
        []

        :param word: russian noun in the initial form, in lowercase.
        :return: list of Explanation objects
        """
        from explanations.explanation import Explanation
        return [Explanation(cls, key) for key in cls.keys_for_word(word)]

    @classmethod
    def text_for_key(cls, key):
        """
        This method is used by explanation.Explanation to represent its information stored in key.
        If not overridden, returns repr(key).

        :param key: key generated by keys_for_word
        :return: string containing end user representation of the explanation
        """
        return repr(key)

    @classmethod
    def keys_for_word(cls, word: str):
        """
        This method is used by explain to initialize Explanations list. It should return a list of
        keys objects. Each of them has to be enough for text_for_key to make the explanation text.

        :param word: the russian lowercase word to be explained
        :raise NotImplementedError: if not overridden by successors.
        """
        raise NotImplementedError

    @classmethod
    def explainable_words(cls):
        """
        Generates all words explainable using this source. Should be overridden by successors.
        :return: Iterable of explainable words
        :raise NotImplementedError: if not overridden by successors.
        """
        raise NotImplementedError
